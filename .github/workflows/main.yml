name: Main CI/CD

on:
  push:
jobs:
  check:
    runs-on: ubuntu-latest
    name: Lint and test

    steps:
      - uses: actions/checkout@v2

      - name: Lint
        run: echo Linting ${{ github.ref }}
        
      - name: Test
        run: echo Testing ${{ github.ref }}

  build:
    runs-on: ubuntu-latest
    name: Build
    needs: check

    steps:
      - uses: actions/checkout@v2

      - name: Build
        run: echo Building ${{ github.ref }}!

  qa-auto-updates:
    name: Determine required updates
    runs-on: ubuntu-latest
    needs: build
    outputs:
      environments: ${{ toJson(fromJson(steps.get-update-environments.outputs.data).repository.label.issues.nodes.*.title) }}
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - uses: octokit/graphql-action@v2.x
        id: get-update-environments
        with:
          query: |
            query release($owner:String!,$repo:String!) {
              repository(owner:$owner,name:$repo) {
                label(name: "React ${{ steps.extract_branch.outputs.branch }}") {
                  issues(first: 50) {
                    nodes {
                      title
                    }
                  }
                }
              }
            }
          owner: ${{ github.event.repository.owner.login }}
          repo: ${{ github.event.repository.name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  log:
    name: Log
    runs-on: ubuntu-latest
    needs: qa-auto-updates
    steps:
      - run: echo '${{ needs.qa-auto-updates.outputs.environments }}'

  deploy-qa:
    name: QA
    uses: aarontwf/actions-playground/.github/workflows/deploy.yaml@main
    needs: qa-auto-updates
    if: github.event_name == 'push'
    with:
      environments: ${{ needs.qa-auto-updates.outputs.environments }}
  
  deploy-staging:
    name: Staging
    uses: aarontwf/actions-playground/.github/workflows/deploy.yaml@main
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    with:
      environments: '["Staging 01", "Staging 02"]'

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: Production
    
    steps:
      - run: echo Deploying ${{ github.ref }} to Production!
